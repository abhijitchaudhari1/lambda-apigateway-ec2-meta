{
  "_args": [
    [
      {
        "raw": "serverless-wsgi@github:logandk/serverless-wsgi",
        "scope": null,
        "escapedName": "serverless-wsgi",
        "name": "serverless-wsgi",
        "rawSpec": "github:logandk/serverless-wsgi",
        "spec": "github:logandk/serverless-wsgi",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:logandk/serverless-wsgi.git",
          "sshUrl": "git+ssh://git@github.com/logandk/serverless-wsgi.git",
          "httpsUrl": "git+https://github.com/logandk/serverless-wsgi.git",
          "gitUrl": "git://github.com/logandk/serverless-wsgi.git",
          "shortcut": "github:logandk/serverless-wsgi",
          "directUrl": "https://raw.githubusercontent.com/logandk/serverless-wsgi/master/package.json"
        }
      },
      "/root/abhijit"
    ]
  ],
  "_from": "logandk/serverless-wsgi",
  "_id": "serverless-wsgi@1.4.7",
  "_inCache": true,
  "_location": "/serverless-wsgi",
  "_phantomChildren": {
    "graceful-fs": "4.1.11",
    "universalify": "0.1.1"
  },
  "_requested": {
    "raw": "serverless-wsgi@github:logandk/serverless-wsgi",
    "scope": null,
    "escapedName": "serverless-wsgi",
    "name": "serverless-wsgi",
    "rawSpec": "github:logandk/serverless-wsgi",
    "spec": "github:logandk/serverless-wsgi",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:logandk/serverless-wsgi.git",
      "sshUrl": "git+ssh://git@github.com/logandk/serverless-wsgi.git",
      "httpsUrl": "git+https://github.com/logandk/serverless-wsgi.git",
      "gitUrl": "git://github.com/logandk/serverless-wsgi.git",
      "shortcut": "github:logandk/serverless-wsgi",
      "directUrl": "https://raw.githubusercontent.com/logandk/serverless-wsgi/master/package.json"
    }
  },
  "_requiredBy": [
    "#DEV:/",
    "#USER"
  ],
  "_resolved": "git://github.com/logandk/serverless-wsgi.git#39e46a070a56a0c2b54a660fadae2f9d1be842a4",
  "_shasum": "54a85746eb4cc2682e2bbc9d965a814556055f27",
  "_shrinkwrap": null,
  "_spec": "serverless-wsgi@github:logandk/serverless-wsgi",
  "_where": "/root/abhijit",
  "author": {
    "name": "logan.dk"
  },
  "bin": {},
  "bugs": {
    "url": "https://github.com/logandk/serverless-wsgi/issues"
  },
  "dependencies": {
    "bluebird": "^3.5.1",
    "fs-extra": "^5.0.0",
    "lodash": "^4.17.5"
  },
  "description": "Serverless WSGI Plugin",
  "devDependencies": {
    "chai": "^4.1.2",
    "chai-as-promised": "^7.0.0",
    "eslint": "^4.18.2",
    "istanbul": "^0.4.4",
    "mocha": "^5.0.4",
    "sinon": "^4.4.2"
  },
  "engines": {
    "node": ">=4.0"
  },
  "files": [
    "CHANGELOG.md",
    "index.js",
    "LICENSE",
    "package.json",
    "README.md",
    "requirements.py",
    "requirements.txt",
    "serve.py",
    "wsgi.py"
  ],
  "gitHead": "39e46a070a56a0c2b54a660fadae2f9d1be842a4",
  "homepage": "https://github.com/logandk/serverless-wsgi#readme",
  "keywords": [
    "serverless",
    "wsgi",
    "flask",
    "serverless framework plugin",
    "serverless applications",
    "serverless plugins",
    "api gateway",
    "lambda",
    "aws",
    "aws lambda",
    "amazon",
    "amazon web services",
    "serverless.com"
  ],
  "license": "MIT",
  "main": "index.js",
  "name": "serverless-wsgi",
  "optionalDependencies": {},
  "readme": "# Serverless WSGI\n\n[![npm package](https://nodei.co/npm/serverless-wsgi.png?downloads=true&downloadRank=true&stars=true)](https://nodei.co/npm/serverless-wsgi/)\n\n[![serverless](http://public.serverless.com/badges/v3.svg)](http://www.serverless.com)\n[![Build Status](https://travis-ci.org/logandk/serverless-wsgi.png?branch=master)](https://travis-ci.org/logandk/serverless-wsgi)\n[![Coverage Status](https://coveralls.io/repos/github/logandk/serverless-wsgi/badge.svg?branch=master)](https://coveralls.io/github/logandk/serverless-wsgi?branch=master)\n[![Dependency Status](https://david-dm.org/logandk/serverless-wsgi.png)](https://david-dm.org/logandk/serverless-wsgi)\n[![Dev Dependency Status](https://david-dm.org/logandk/serverless-wsgi/dev-status.png)](https://david-dm.org/logandk/serverless-wsgi?type=dev)\n\nA Serverless v1.x plugin to build your deploy Python WSGI applications using Serverless. Compatible\nWSGI application frameworks include Flask, Django and Pyramid - for a complete list, see:\nhttp://wsgi.readthedocs.io/en/latest/frameworks.html.\n\n### Features\n\n* Transparently converts API Gateway requests to and from standard WSGI requests\n* Supports anything you'd expect from WSGI such as redirects, cookies, file uploads etc.\n* Automatically downloads Python packages that you specify in `requirements.txt` and deploys them along with your application\n* Convenient `wsgi serve` command for serving your application locally during development\n\n\n## Install\n\n```\nnpm install --save serverless-wsgi\n```\n\nAdd the plugin to your `serverless.yml` file and set the WSGI application:\n\n```yaml\nplugins:\n  - serverless-wsgi\n```\n\n\n## Flask configuration example\n\nThis example assumes that you have intialized your application as `app` inside `api.py`.\n\n```\nproject\n├── api.py\n├── requirements.txt\n└── serverless.yml\n```\n\n### api.py\n\nA regular Flask application.\n\n```python\nfrom flask import Flask\napp = Flask(__name__)\n\n\n@app.route(\"/cats\")\ndef cats():\n    return \"Cats\"\n\n\n@app.route(\"/dogs/<id>\")\ndef dog(id):\n    return \"Dog\"\n```\n\n### serverless.yml\n\nLoad the plugin and set the `custom.wsgi.app` configuration in `serverless.yml` to the\nmodule path of your Flask application.\n\nAll functions that will use WSGI need to have `wsgi.handler` set as the Lambda handler and\nuse the default `lambda-proxy` integration for API Gateway. This configuration example treats\nAPI Gateway as a transparent proxy, passing all requests directly to your Flask application,\nand letting the application handle errors, 404s etc.\n\n```yaml\nservice: example\n\nprovider:\n  name: aws\n  runtime: python2.7\n\nplugins:\n  - serverless-wsgi\n\nfunctions:\n  api:\n    handler: wsgi.handler\n    events:\n      - http: ANY /\n      - http: ANY {proxy+}\n\ncustom:\n  wsgi:\n    app: api.app\n```\n\n\n### requirements.txt\n\nAdd Flask to the application bundle.\n\n```\nFlask==0.12.2\n```\n\n\n## Deployment\n\nSimply run the serverless deploy command as usual:\n\n```\n$ sls deploy\nServerless: Packaging Python WSGI handler...\nServerless: Packaging required Python packages...\nServerless: Packaging service...\nServerless: Removing old service versions...\nServerless: Uploading CloudFormation file to S3...\nServerless: Uploading service .zip file to S3...\nServerless: Updating Stack...\nServerless: Checking Stack update progress...\n..........\nServerless: Stack update finished...\n```\n\n\n## Other frameworks\n\nSet `custom.wsgi.app` in `serverless.yml` according to your WSGI callable:\n\n* For Pyramid, use [make_wsgi_app](http://docs.pylonsproject.org/projects/pyramid/en/latest/api/config.html#pyramid.config.Configurator.make_wsgi_app) to intialize the callable\n* Django is configured for WSGI by default, set the callable to `<project_name>.wsgi.application`. See https://docs.djangoproject.com/en/1.10/howto/deployment/wsgi/ for more information.\n\n\n## Usage\n\n### Automatic requirement packaging\n\nYou'll need to include any packages that your application uses in the bundle\nthat's deployed to AWS Lambda. This plugin helps you out by doing this automatically,\nas long as you specify your required packages in a `requirements.txt` file in the root\nof your Serverless service path:\n\n```\nFlask==0.12.2\nrequests==2.18.3\n```\n\nFor more information, see https://pip.readthedocs.io/en/1.1/requirements.html.\n\nYou can use the requirement packaging functionality of *serverless-wsgi* without the WSGI\nhandler itself by including the plugin in your `serverless.yml` configuration, without specifying\nthe `custom.wsgi.app` setting. This will omit the WSGI handler from the package, but include\nany requirements specified in `requirements.txt`.\n\nIf you don't want to use automatic requirement packaging you can set `custom.wsgi.packRequirements` to false:\n\n```yaml\ncustom:\n  wsgi:\n    app: api.app\n    packRequirements: false\n```\n\nFor a more advanced approach to packaging requirements, consider using https://github.com/UnitedIncome/serverless-python-requirements.\n\n### Python version\n\nPython is used for packaging requirements and serving the app when invoking `sls wsgi serve`. By\ndefault, the current runtime setting is expected to be the name of the Python binary in `PATH`,\nfor instance `python3.6`. If this is not the name of your Python binary, override it using the\n`pythonBin` option:\n\n```yaml\ncustom:\n  wsgi:\n    app: api.app\n    pythonBin: python3\n```\n\n### Local server\n\nFor convenience, a `sls wsgi serve` command is provided to run your WSGI application\nlocally. This command requires the `werkzeug` Python package to be installed,\nand acts as a simple wrapper for starting werkzeug's built-in HTTP server.\n\nBy default, the server will start on port 5000.\n\n```\n$ sls wsgi serve\n * Running on http://localhost:5000/ (Press CTRL+C to quit)\n * Restarting with stat\n * Debugger is active!\n```\n\nConfigure the port using the `-p` parameter:\n\n```\n$ sls wsgi serve -p 8000\n * Running on http://localhost:8000/ (Press CTRL+C to quit)\n * Restarting with stat\n * Debugger is active!\n```\n\n\n### Explicit routes\n\nIf you'd like to be explicit about which routes and HTTP methods should pass through to your\napplication, see the following example:\n\n```yaml\nservice: example\n\nprovider:\n  name: aws\n  runtime: python2.7\n\nplugins:\n  - serverless-wsgi\n\nfunctions:\n  api:\n    handler: wsgi.handler\n    events:\n      - http:\n          path: cats\n          method: get\n          integration: lambda-proxy\n      - http:\n          path: dogs/{id}\n          method: get\n          integration: lambda-proxy\n\ncustom:\n  wsgi:\n    app: api.app\n```\n\n### Custom domain names\n\nIf you use custom domain names with API Gateway, you might have a base path that is\nat the beginning of your path, such as the stage (`/dev`, `/stage`, `/prod`). You\ncan pass in an `API_GATEWAY_BASE_PATH` environment variable so your WSGI app can\nhandle it correctly.\n\nThe example below uses the [serverless-domain-manager](https://github.com/amplify-education/serverless-domain-manager)\nplugin to handle custom domains in API Gateway:\n\n```yaml\nservice: example\n\nprovider:\n  name: aws\n  runtime: python2.7\n  environment:\n    API_GATEWAY_BASE_PATH: ${self:custom.customDomain.basePath}\n\nplugins:\n  - serverless-wsgi\n  - serverless-domain-manager\n\nfunctions:\n  api:\n    handler: wsgi.handler\n    events:\n      - http: ANY /\n      - http: ANY {proxy+}\n\ncustom:\n  wsgi:\n    app: api.app\n  customDomain:\n    basePath: ${opt:stage}\n    domainName: mydomain.name.com\n    stage: ${opt:stage}\n    createRoute53Record: true\n```\n\n### File uploads\n\nIn order to accept file uploads from HTML forms, make sure to add `multipart/form-data` to\nthe list of content types with *Binary Support* in your API Gateway API. The\n[serverless-apigw-binary](https://github.com/maciejtreder/serverless-apigw-binary)\nServerless plugin can be used to automate this process.\n\nKeep in mind that, when building Serverless applications, uploading\n[directly to S3](http://docs.aws.amazon.com/AmazonS3/latest/dev/UsingHTTPPOST.html)\nfrom the browser is usually the preferred approach.\n\n\n# Thanks\n\nThanks to [Zappa](https://github.com/Miserlou/Zappa), which has been both the\ninspiration and source of several implementations that went into this project.\n\nThanks to [chalice](https://github.com/awslabs/chalice) for the\nrequirement packaging implementation.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/logandk/serverless-wsgi.git"
  },
  "scripts": {
    "lint": "eslint *.js",
    "pylint": "flake8 --exclude node_modules",
    "pytest": "py.test --cov=serve --cov=requirements --cov=wsgi --cov-report=html",
    "test": "istanbul cover -x '*.test.js' node_modules/mocha/bin/_mocha '*.test.js' -- -R spec"
  },
  "version": "1.4.7"
}
